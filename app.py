import os
import threading
from datetime import datetime, timedelta, timezone
import sqlite3
from flask import Flask, request, jsonify
from flask_cors import CORS
from telegram import Update, Bot
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ConversationHandler,
    ContextTypes, filters
)
from dotenv import load_dotenv
from apscheduler.schedulers.background import BackgroundScheduler
import pytz
import hmac
import hashlib
import time
import json
from functools import wraps

load_dotenv()

# DEBUG: –í—ã–≤–µ—Å—Ç–∏ —Ç–µ–∫—É—â–∏–π API_SECRET –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
API_SECRET = os.getenv('API_SECRET', 'supersecretkey')
print('=== API_SECRET (Flask) ===')
print(repr(API_SECRET))
print('==========================')

SQLITE_DB = os.getenv("SQLITE_DB", "your_bot_db.sqlite")
USERS_TABLE = 'users'
INVITES_TABLE = 'invites'
BARS = ['–ê–í–û–®59', '–ê–í–ü–ú97', '–ê–í–Ø–†01', '–ê–í–ö–û–°–ú04', '–ê–í–ö–û04', '–ê–í–î–®02', '–ê–í–ö–®78', '–ê–í–ü–ú58', '–ê–í–õ–ë96']
CATEGORIES = ["üçØ –°–∏—Ä–æ–ø—ã", "ü•ï –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", "‚òï –ö–æ—Ñ–µ", "üì¶ –ü—Ä–æ—á–µ–µ"]
REG_WAIT_CODE = 0
UPLOAD_BACKUP_WAIT_FILE = 100  # –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±—ç–∫–∞–ø–∞
RESTORE_BACKUP_WAIT_FILE = 101  # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã

app = Flask(__name__)
CORS(
    app,
    origins=[
        "https://kester7ka.github.io",
        "https://kester7ka.github.io/my-bar-site"
    ],
    allow_headers="*",
    methods=["GET", "POST", "OPTIONS"],
    expose_headers="*"
)

MSK_TZ = timezone(timedelta(hours=3))

TELEGRAM_ADMIN_ID = 1209688883  # —Ç–≤–æ–π user_id
DB_FILENAME = SQLITE_DB
BOT_TOKEN = os.getenv('BOT_TOKEN')

last_backup_time = None  # –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞

def verify_hmac(payload, timestamp, hmac_to_check):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (2 –º–∏–Ω—É—Ç—ã)
    now = int(time.time())
    try:
        ts = int(timestamp)
    except Exception:
        return False
    if abs(now - ts) > 120:
        return False
    msg = payload + str(timestamp)
    expected = hmac.new(API_SECRET.encode(), msg.encode(), hashlib.sha256).hexdigest()
    return hmac.compare_digest(expected, hmac_to_check)

def require_hmac(f):
    @wraps(f)
    def wrapper(*args, **kwargs):
        data = request.get_json()
        payload = data.get('payload')
        timestamp = data.get('timestamp')
        hmac_val = data.get('hmac')
        if not (payload and timestamp and hmac_val):
            return jsonify(ok=False, error='HMAC required'), 401
        if not verify_hmac(payload, timestamp, hmac_val):
            return jsonify(ok=False, error='Invalid HMAC'), 401
        # –ü–æ–¥–º–µ–Ω—è–µ–º request.json –Ω–∞ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π payload
        request._cached_json = json.loads(payload)
        return f(*args, **kwargs)
    return wrapper

def ensure_bar_table(bar_name):
    if bar_name not in BARS:
        raise Exception("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞—Ä")
    with sqlite3.connect(SQLITE_DB) as conn:
        cursor = conn.cursor()
        cursor.execute(f"""
        CREATE TABLE IF NOT EXISTS {bar_name} (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            category TEXT,
            tob TEXT,
            name TEXT,
            manufactured_at TEXT,
            shelf_life_days INTEGER,
            opened_at TEXT,
            opened_shelf_life_days INTEGER,
            opened INTEGER DEFAULT 0
        )
        """)
        conn.commit()

def migrate_all_bars():
    for bar in BARS:
        ensure_bar_table(bar)

def db_query(sql, params=(), fetch=False):
    try:
        if not os.path.exists(SQLITE_DB):
            raise Exception(f"–§–∞–π–ª –±–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω: {SQLITE_DB}")
        with sqlite3.connect(SQLITE_DB) as conn:
            cursor = conn.cursor()
            cursor.execute(sql, params)
            if fetch:
                return cursor.fetchall()
            conn.commit()
            return None
    except Exception as e:
        raise

def get_user_bar(user_id):
    try:
        res = db_query(f"SELECT bar_name FROM {USERS_TABLE} WHERE user_id=?", (user_id,), fetch=True)
        return res[0][0] if res else None
    except Exception as e:
        return None

def check_user_access(user_id):
    try:
        return get_user_bar(user_id) is not None
    except Exception as e:
        return False

def get_bar_table(user_id):
    bar_name = get_user_bar(user_id)
    if bar_name in BARS:
        ensure_bar_table(bar_name)
        return bar_name
    return None

def msk_now():
    return datetime.now(MSK_TZ)

def msk_today_str():
    return msk_now().strftime('%Y-%m-%d')

def calc_expiry_by_total(manufactured_at, shelf_life_days):
    if not manufactured_at or not shelf_life_days:
        return None
    try:
        return (datetime.strptime(manufactured_at, '%Y-%m-%d') + timedelta(days=int(shelf_life_days))).strftime('%Y-%m-%d')
    except:
        return None

def calc_expiry_by_opened(opened_at, opened_shelf_life_days):
    if not opened_at or not opened_shelf_life_days:
        return None
    try:
        return (datetime.strptime(opened_at, '%Y-%m-%d') + timedelta(days=int(opened_shelf_life_days))).strftime('%Y-%m-%d')
    except:
        return None

def min_date(date1, date2):
    if date1 and date2:
        return min(date1, date2)
    return date1 or date2

@app.route('/userinfo', methods=['POST'])
@require_hmac
def api_userinfo():
    data = request.get_json()
    user_id = data.get('user_id')
    try:
        if not user_id:
            return jsonify(ok=False, error="–ù–µ—Ç user_id")
        res = db_query(f"SELECT username, bar_name FROM {USERS_TABLE} WHERE user_id=?", (user_id,), fetch=True)
        if res:
            username, bar_name = res[0]
            return jsonify(ok=True, username=username, bar_name=bar_name)
        return jsonify(ok=False, error="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        return jsonify(ok=False, error=str(e))

@app.route('/add', methods=['POST'])
@require_hmac
def api_add():
    data = request.get_json()
    user_id = data.get('user_id')
    try:
        if not user_id or not check_user_access(user_id):
            return jsonify(ok=False, error="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        bar_table = get_bar_table(user_id)
        d = data
        # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        manufactured_at = d['manufactured_at']
        shelf_life_days = int(d['shelf_life_days'])
        opened = int(d.get('opened', 0))
        opened_at = d.get('opened_at')
        opened_shelf_life_days = d.get('opened_shelf_life_days')
        if opened_shelf_life_days is not None:
            opened_shelf_life_days = int(opened_shelf_life_days)
        with sqlite3.connect(SQLITE_DB) as conn:
            cursor = conn.cursor()
            cursor.execute(
                f"INSERT INTO {bar_table} (category, tob, name, manufactured_at, shelf_life_days, opened_at, opened_shelf_life_days, opened) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
                (
                    d['category'],
                    d['tob'],
                    d['name'],
                    manufactured_at,
                    shelf_life_days,
                    opened_at,
                    opened_shelf_life_days,
                    opened
                )
            )
            new_id = cursor.lastrowid
            conn.commit()
        return jsonify(ok=True, id=new_id)
    except Exception as e:
        return jsonify(ok=False, error=str(e))

@app.route('/open', methods=['POST'])
@require_hmac
def api_open():
    data = request.get_json()
    user_id = data.get('user_id')
    try:
        if not user_id or not check_user_access(user_id):
            return jsonify(ok=False, error="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        bar_table = get_bar_table(user_id)
        tob = data['tob']
        category = data['category']
        name = data['name']
        today = msk_today_str()
        res = db_query(f"SELECT id, shelf_life_days FROM {bar_table} WHERE tob=? AND opened=1", (tob,), fetch=True)
        if res:
            old_id, shelf_life_days = res[0]
            db_query(f"UPDATE {bar_table} SET opened=0 WHERE id=?", (old_id,))
            expiry_at = (msk_now() + timedelta(days=int(shelf_life_days))).strftime('%Y-%m-%d')
            with sqlite3.connect(SQLITE_DB) as conn:
                cursor = conn.cursor()
                cursor.execute(
                    f"INSERT INTO {bar_table} (category, tob, name, opened_at, shelf_life_days, expiry_at, opened) VALUES (?, ?, ?, ?, ?, ?, 1)",
                    (category, tob, name, today, shelf_life_days, expiry_at)
                )
                new_id = cursor.lastrowid
                conn.commit()
            return jsonify(ok=True, replaced=True, id=new_id)
        else:
            shelf_life_days = int(data['shelf_life_days'])
            expiry_at = (msk_now() + timedelta(days=shelf_life_days)).strftime('%Y-%m-%d')
            with sqlite3.connect(SQLITE_DB) as conn:
                cursor = conn.cursor()
                cursor.execute(
                    f"INSERT INTO {bar_table} (category, tob, name, opened_at, shelf_life_days, expiry_at, opened) VALUES (?, ?, ?, ?, ?, ?, 1)",
                    (category, tob, name, today, shelf_life_days, expiry_at)
                )
                new_id = cursor.lastrowid
                conn.commit()
            return jsonify(ok=True, replaced=False, id=new_id)
    except Exception as e:
        return jsonify(ok=False, error=str(e))

@app.route('/expired', methods=['POST'])
@require_hmac
def api_expired():
    data = request.get_json()
    user_id = data.get('user_id')
    try:
        if not user_id or not check_user_access(user_id):
            return jsonify(ok=False, error="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        bar_table = get_bar_table(user_id)
        now = msk_today_str()
        select_columns = "id, category, tob, name, manufactured_at, shelf_life_days, opened_at, opened_shelf_life_days, opened"
        rows = db_query(
            f"SELECT {select_columns} FROM {bar_table}", (), fetch=True
        )
        results = []
        for r in rows:
            expiry_by_total = calc_expiry_by_total(r[4], r[5])
            expiry_by_opened = calc_expiry_by_opened(r[6], r[7])
            expiry_final = min_date(expiry_by_total, expiry_by_opened)
            if expiry_final and expiry_final <= now:
                results.append({
                    'id': r[0], 'category': r[1], 'tob': r[2], 'name': r[3],
                    'manufactured_at': r[4], 'shelf_life_days': r[5],
                    'opened_at': r[6], 'opened_shelf_life_days': r[7],
                    'opened': r[8],
                    'expiry_by_total': expiry_by_total,
                    'expiry_by_opened': expiry_by_opened,
                    'expiry_final': expiry_final
                })
        return jsonify(ok=True, results=results)
    except Exception as e:
        return jsonify(ok=False, error=str(e))

@app.route('/search', methods=['POST'])
@require_hmac
def api_search():
    data = request.get_json()
    user_id = data.get('user_id')
    try:
        if not user_id or not check_user_access(user_id):
            return jsonify(ok=False, error="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        bar_table = get_bar_table(user_id)
        query = data.get('query', '').strip().lower()
        select_columns = "id, category, tob, name, manufactured_at, shelf_life_days, opened_at, opened_shelf_life_days, opened"
        if not query:
            rows = db_query(
                f"SELECT {select_columns} FROM {bar_table}", (), fetch=True
            )
        elif query.isdigit() and len(query) == 6:
            rows = db_query(
                f"SELECT {select_columns} FROM {bar_table} WHERE tob=?", (query,), fetch=True
            )
        else:
            rows = db_query(
                f"SELECT {select_columns} FROM {bar_table} WHERE LOWER(name) LIKE ?", (f"%{query}%",), fetch=True
            )
        results = []
        for r in rows:
            expiry_by_total = calc_expiry_by_total(r[4], r[5])
            expiry_by_opened = calc_expiry_by_opened(r[6], r[7])
            expiry_final = min_date(expiry_by_total, expiry_by_opened)
            results.append({
                'id': r[0], 'category': r[1], 'tob': r[2], 'name': r[3],
                'manufactured_at': r[4], 'shelf_life_days': r[5],
                'opened_at': r[6], 'opened_shelf_life_days': r[7],
                'opened': r[8],
                'expiry_by_total': expiry_by_total,
                'expiry_by_opened': expiry_by_opened,
                'expiry_final': expiry_final
            })
        return jsonify(ok=True, results=results)
    except Exception as e:
        return jsonify(ok=False, error=str(e))

@app.route('/update', methods=['POST'])
@require_hmac
def api_update():
    data = request.get_json()
    user_id = data.get('user_id')
    try:
        if not user_id or not check_user_access(user_id):
            return jsonify(ok=False, error="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        bar_table = get_bar_table(user_id)
        item_id = data.get('id')
        if not item_id:
            return jsonify(ok=False, error="–ù–µ —É–∫–∞–∑–∞–Ω id –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        fields = []
        params = []
        for field in ('category', 'name', 'manufactured_at', 'shelf_life_days', 'opened_at', 'opened_shelf_life_days', 'opened'):
            if field in data:
                fields.append(f"{field}=?")
                params.append(data[field])
        params.append(item_id)
        if not fields:
            return jsonify(ok=False, error="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        db_query(f"UPDATE {bar_table} SET {', '.join(fields)} WHERE id=?", tuple(params))
        return jsonify(ok=True)
    except Exception as e:
        return jsonify(ok=False, error=str(e))

@app.route('/delete', methods=['POST'])
@require_hmac
def api_delete():
    data = request.get_json()
    user_id = data.get('user_id')
    try:
        if not user_id or not check_user_access(user_id):
            return jsonify(ok=False, error="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        bar_table = get_bar_table(user_id)
        item_id = data.get('id')
        if not item_id:
            return jsonify(ok=False, error="–ù–µ —É–∫–∞–∑–∞–Ω id –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        res = db_query(f"SELECT id FROM {bar_table} WHERE id=?", (item_id,), fetch=True)
        if not res:
            return jsonify(ok=False, error="–ü–æ–∑–∏—Ü–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º id –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        db_query(f"DELETE FROM {bar_table} WHERE id=?", (item_id,))
        return jsonify(ok=True)
    except Exception as e:
        return jsonify(ok=False, error=str(e))

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    import traceback
    tb = ''.join(traceback.format_exception(None, context.error, context.error.__traceback__))
    try:
        if update and hasattr(update, "message") and update.message:
            await update.message.reply_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n<code>{context.error}</code>\n\n"
                f"<b>–î–µ—Ç–∞–ª–∏:</b>\n<code>{tb[-1500:]}</code>",
                parse_mode="HTML"
            )
    except Exception as e:
        pass

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        if not check_user_access(user_id):
            await update.message.reply_text("üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
            return REG_WAIT_CODE
        res = db_query(f"SELECT bar_name, registered_at FROM {USERS_TABLE} WHERE user_id=?", (user_id,), fetch=True)
        if res:
            bar, reg = res[0]
            await update.message.reply_text(
                f"üë§ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–∞—Ä–µ: <b>{bar}</b>\n"
                f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg}", parse_mode="HTML"
            )
        else:
            await update.message.reply_text("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–¥–∞.")
        return ConversationHandler.END
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")

async def reg_wait_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip()
    user_id = update.effective_user.id
    username = update.effective_user.username or ""
    try:
        invites = db_query(
            f"SELECT bar_name FROM {INVITES_TABLE} WHERE code=? AND used='–Ω–µ—Ç'", (code,), fetch=True
        )
        if not invites:
            await update.message.reply_text("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return REG_WAIT_CODE
        user_exists = db_query(
            f"SELECT user_id FROM {USERS_TABLE} WHERE user_id=?", (user_id,), fetch=True
        )
        if user_exists:
            await update.message.reply_text("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            return ConversationHandler.END
        bar_name = invites[0][0]
        now = msk_now().strftime('%Y-%m-%d %H:%M:%S')
        db_query(
            f"INSERT INTO {USERS_TABLE} (user_id, username, bar_name, registered_at) VALUES (?, ?, ?, ?)",
            (user_id, username, bar_name, now)
        )
        db_query(
            f"UPDATE {INVITES_TABLE} SET used='–¥–∞' WHERE code=?", (code,)
        )
        ensure_bar_table(bar_name)
        await update.message.reply_text(f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {bar_name}!\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º (—Å–∞–π—Ç–æ–º).")
        return ConversationHandler.END
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")

async def whoami(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        res = db_query(f"SELECT bar_name, registered_at FROM {USERS_TABLE} WHERE user_id=?", (user_id,), fetch=True)
        if res:
            bar, reg = res[0]
            await update.message.reply_text(
                f"üë§ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–∞—Ä–µ: <b>{bar}</b>\n"
                f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg}", parse_mode="HTML"
            )
        else:
            await update.message.reply_text("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–¥–∞.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")

async def admin_only(update: Update):
    return update.effective_user and update.effective_user.id == TELEGRAM_ADMIN_ID

async def lastbackup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await admin_only(update):
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    global last_backup_time
    if last_backup_time:
        await update.message.reply_text(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø –±—ã–ª: {last_backup_time}")
    else:
        await update.message.reply_text("–ë—ç–∫–∞–ø –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è.")

async def forcebackup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await admin_only(update):
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    try:
        periodic_backup()
        await update.message.reply_text("–ë—ç–∫–∞–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±—ç–∫–∞–ø–∞: {e}")

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    is_admin = (user_id == TELEGRAM_ADMIN_ID)
    if is_admin:
        commands = [
            '/start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å',
            '/whoami ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –±–∞—Ä–µ',
            '/lastbackup ‚Äî –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞ (–∞–¥–º–∏–Ω)',
            '/forcebackup ‚Äî —Å–¥–µ–ª–∞—Ç—å –±—ç–∫–∞–ø —Å–µ–π—á–∞—Å (–∞–¥–º–∏–Ω)',
            '/sendbackup ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±—ç–∫–∞–ø –±–∞–∑—ã (–∞–¥–º–∏–Ω)',
            '/restorebackup ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –∏–∑ —Ñ–∞–π–ª–∞ (–∞–¥–º–∏–Ω)',
            '/uploadbackup ‚Äî –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Ñ–∞–π–ª –≤ —á–∞—Ç (–∞–¥–º–∏–Ω)',
            '/info ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥',
        ]
    else:
        commands = [
            '/start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å',
            '/whoami ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –±–∞—Ä–µ',
            '/info ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥',
        ]
    text = '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' + '\n'.join(commands)
    await update.message.reply_text(text)

def periodic_backup():
    global last_backup_time
    try:
        if not os.path.exists(DB_FILENAME):
            print(f"[periodic_backup] –§–∞–π–ª –±–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω: {DB_FILENAME}")
            return
        file_size = os.path.getsize(DB_FILENAME)
        print(f"[periodic_backup] –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
        if file_size > 49 * 1024 * 1024:
            print(f"[periodic_backup] –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è Telegram (>49MB)")
            return
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ telegram.ext
        from telegram.ext import Application
        import asyncio
        async def send_backup():
            app = Application.builder().token(BOT_TOKEN).build()
            async with app:
                with open(DB_FILENAME, "rb") as f:
                    await app.bot.send_document(chat_id=TELEGRAM_ADMIN_ID, document=f, filename=DB_FILENAME)
            print("–ë—ç–∫–∞–ø –±–∞–∑—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram.")
        asyncio.run(send_backup())
        last_backup_time = datetime.now(pytz.timezone('Europe/Moscow')).strftime('%Y-%m-%d %H:%M:%S')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±—ç–∫–∞–ø–∞: {e}")

def start_periodic_backup():
    scheduler = BackgroundScheduler()
    scheduler.add_job(periodic_backup, 'interval', hours=2, minutes=30)
    scheduler.start()

def restore_db_from_telegram():
    try:
        bot = Bot(token=BOT_TOKEN)
        updates = bot.get_updates()
        bot_id = bot.get_me().id
        found = False
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
        for update in reversed(updates):
            msg = update.message
            if msg and msg.from_user and msg.from_user.id == bot_id:
                if msg.document and msg.document.file_name.endswith('.sqlite'):
                    file = bot.get_file(msg.document.file_id)
                    file.download(DB_FILENAME)
                    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ Telegram (–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: –±–æ—Ç).")
                    found = True
                    break
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –∏—â–µ–º —Å—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∞
        if not found:
            for update in reversed(updates):
                msg = update.message
                if msg and msg.from_user and msg.from_user.id == TELEGRAM_ADMIN_ID:
                    if msg.document and msg.document.file_name.endswith('.sqlite'):
                        file = bot.get_file(msg.document.file_id)
                        file.download(DB_FILENAME)
                        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ Telegram (–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: –∞–¥–º–∏–Ω).")
                        found = True
                        break
        if not found:
            print("–§–∞–π–ª –±–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ Telegram. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å).")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã: {e}")

def run_flask():
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

UPLOAD_BACKUP_WAIT_FILE = 100  # –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±—ç–∫–∞–ø–∞

async def uploadbackup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != TELEGRAM_ADMIN_ID:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return ConversationHandler.END
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞ (.sqlite)")
    return UPLOAD_BACKUP_WAIT_FILE

async def handle_backup_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != TELEGRAM_ADMIN_ID:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return ConversationHandler.END
    doc = update.message.document
    if not doc or not doc.file_name.endswith('.sqlite'):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .sqlite")
        return UPLOAD_BACKUP_WAIT_FILE
    file = await doc.get_file()
    file_path = f"received_{doc.file_name}"
    await file.download_to_drive(file_path)
    await update.message.reply_text(f"–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ —á–∞—Ç...")
    bot = Bot(token=BOT_TOKEN)
    with open(file_path, "rb") as f:
        bot.send_document(chat_id=TELEGRAM_ADMIN_ID, document=f, filename=doc.file_name)
    await update.message.reply_text("–ë—ç–∫–∞–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    os.remove(file_path)
    return ConversationHandler.END

async def sendbackup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != TELEGRAM_ADMIN_ID:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    try:
        if not os.path.exists(DB_FILENAME):
            await update.message.reply_text(f"–§–∞–π–ª –±–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω: {DB_FILENAME}")
            return
        file_size = os.path.getsize(DB_FILENAME)
        await update.message.reply_text(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç. –ü—Ä–æ–±—É—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å...")
        if file_size > 49 * 1024 * 1024:
            await update.message.reply_text("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è Telegram (>49MB)")
            return
        with open(DB_FILENAME, "rb") as f:
            await context.bot.send_document(chat_id=update.effective_chat.id, document=f, filename=DB_FILENAME)
        await update.message.reply_text("–ë—ç–∫–∞–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±—ç–∫–∞–ø–∞: {e}")

async def restorebackup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != TELEGRAM_ADMIN_ID:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return ConversationHandler.END
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞ (.sqlite), —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É. –í–ù–ò–ú–ê–ù–ò–ï: —Ç–µ–∫—É—â–∞—è –±–∞–∑–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–∞!")
    return RESTORE_BACKUP_WAIT_FILE

async def handle_restore_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != TELEGRAM_ADMIN_ID:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return ConversationHandler.END
    doc = update.message.document
    if not doc or not doc.file_name.endswith('.sqlite'):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .sqlite")
        return RESTORE_BACKUP_WAIT_FILE
    file = await doc.get_file()
    await file.download_to_drive(DB_FILENAME)
    await update.message.reply_text(f"–ë–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞ {doc.file_name}!")
    return ConversationHandler.END

if __name__ == '__main__':
    restore_db_from_telegram()  # —Å–Ω–∞—á–∞–ª–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É
    migrate_all_bars()
    start_periodic_backup()     # –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø
    threading.Thread(target=run_flask, daemon=True).start()
    token = os.getenv('BOT_TOKEN')
    if not token:
        exit(1)
    bot_app = ApplicationBuilder().token(token).build()
    bot_app.add_handler(ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            REG_WAIT_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_wait_code)],
            UPLOAD_BACKUP_WAIT_FILE: [MessageHandler(filters.Document.ALL, handle_backup_file)],
            RESTORE_BACKUP_WAIT_FILE: [MessageHandler(filters.Document.ALL, handle_restore_file)]
        },
        fallbacks=[]
    ))
    bot_app.add_handler(CommandHandler('whoami', whoami))
    bot_app.add_handler(CommandHandler('lastbackup', lastbackup))
    bot_app.add_handler(CommandHandler('forcebackup', forcebackup))
    bot_app.add_handler(CommandHandler('info', info))
    bot_app.add_handler(CommandHandler('uploadbackup', uploadbackup))
    bot_app.add_handler(CommandHandler('sendbackup', sendbackup))
    bot_app.add_handler(CommandHandler('restorebackup', restorebackup))
    bot_app.add_error_handler(error_handler)
    bot_app.run_polling()
